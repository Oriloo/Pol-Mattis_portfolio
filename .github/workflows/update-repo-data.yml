name: Update Repository Data

on:
  schedule:
    - cron: '0 0 * * *'  # Exécution tous les jours à 0h00 UTC
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

permissions:
  contents: write  # Donne au PAT les permissions d'écriture
  issues: read     # Donne accès aux issues du dépôt (si besoin)

jobs:
  update-repo-data:
    runs-on: ubuntu-latest
    steps:
      # Étape 1: Cloner le dépôt en utilisant le PAT
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_GITHUB }}  # Utilisation du PAT pour les opérations Git
          fetch-depth: 0  # Récupérer tout l'historique

      # Étape 2: Créer ou se positionner sur la branche 'test-workflows'
      - name: Create or switch to 'test-workflows' branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/heads/test-workflows; then
            git checkout test-workflows
          else
            git checkout -b test-workflows
          fi

      # Étape 3: Récupérer les données depuis l'API GitHub et écrire dans 'repos.json'
      - name: Fetch repository data
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/user/repos?per_page=100&type=public > repos.json
          ls -lh repos.json
          cat repos.json

      # Étape 4: Modifier 'repos.json' avec un timestamp pour forcer Git à détecter les changements
      - name: Modify repos.json with timestamp
        run: |
          echo "Dernière mise à jour: $(date)" >> repos.json
          ls -lh repos.json
          cat repos.json

      # Étape 5: Vérifier les changements détectés par Git
      - name: Verify Git changes
        run: |
          git status
          git diff repos.json

      # Étape 6: Ajouter le fichier modifié à l'index Git
      - name: Add repos.json to Git
        run: |
          git add repos.json
          git status  # Vérifier que repos.json est bien ajouté

      # Étape 7: Configurer Git avec un utilisateur valide
      - name: Configure Git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Action Bot"

      # Étape 8: Commit les changements
      - name: Commit changes
        run: |
          git commit -m "Mise à jour des données des dépôts"

      # Étape 9: Push les changements vers la branche 'test-workflows'
      - name: Push changes
        run: |
          git push origin test-workflows
