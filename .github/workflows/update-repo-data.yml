name: Update Repository Data

on:
  schedule:
    - cron: '0 0 * * *'  # Exécution tous les jours à 0h00 UTC
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

permissions:
  contents: write  # Donne au PAT les permissions d'écriture
  issues: read     # Donne accès aux issues du dépôt (si besoin)

jobs:
  update-repo-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_GITHUB }}  # Utilisation du PAT pour les opérations Git
          fetch-depth: 0

      - name: Create or switch to 'test-workflows' branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/heads/test-workflows; then
            git checkout test-workflows
          else
            git checkout -b test-workflows
          fi

      - name: Debug environment and check required tools
        run: |
          echo "Checking if curl is available..."
          if ! command -v curl &> /dev/null; then
            echo "curl is not installed. Installing curl..."
            sudo apt-get update && sudo apt-get install -y curl
          else
            echo "curl is installed."
          fi

          echo "Checking if jq is available..."
          if ! command -v jq &> /dev/null; then
            echo "jq is not installed. Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is installed."
          fi

          echo "Environment check complete. Continuing with the workflow."

      - name: Fetch repository data
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          echo "Fetching data from GitHub API..."
          curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/user/repos?per_page=100&type=public -o repos.json --fail --silent --show-error

          echo "Checking if repos.json has data..."
          if [ -s repos.json ]; then
            echo "repos.json contains data."
          else
            echo "Error: repos.json is empty."
            exit 1
          fi

          echo "Content of repos.json:"
          cat repos.json

      # Ajouter un timestamp correctement sans écraser le fichier
      - name: Add timestamp to repos.json
        run: |
          # Vérifier si le fichier JSON contient des données
          if [ -s repos.json ]; then
            echo "Le fichier repos.json contient des données, ajout du timestamp."
            # Ajouter le timestamp au contenu existant
            current_content=$(cat repos.json)
            echo "${current_content}" | jq --arg date "$(date)" '. + {"last_updated": $date}' > repos.json
          else
            echo "Erreur : Le fichier repos.json est vide. Aucune donnée à mettre à jour."
          fi
          echo "Contenu de repos.json après ajout du timestamp :"
          cat repos.json

      # Commit et push des changements
      - name: Commit repository data
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Action Bot"
          git add repos.json
          git commit -m "Mise à jour des données des dépôts"
          git push origin test-workflows
