name: Update Repository Data

on:
  schedule:
    - cron: '0 0 * * *'  # Exécution tous les jours à 0h00 UTC
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

permissions:
  contents: write  # Donne au PAT les permissions d'écriture
  issues: read     # Donne accès aux issues du dépôt (si besoin)

jobs:
  update-repo-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_GITHUB }}  # Utilisation du PAT pour les opérations Git
          fetch-depth: 0

      - name: Create or switch to 'test-workflows' branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/heads/test-workflows; then
            git checkout test-workflows
          else
            git checkout -b test-workflows
          fi

      - name: Check if curl is installed
        run: |
          if ! command -v curl &> /dev/null; then
            echo "curl n'est pas installé. Installation de curl..."
            sudo apt-get update && sudo apt-get install -y curl
          else
            echo "curl est déjà installé."
          fi

      - name: Fetch repository data
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          # Récupérer les données avec curl et capturer les erreurs
          curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/user/repos?per_page=100&type=public -o repos.json --fail --silent --show-error

          # Vérifier si le fichier JSON a été correctement rempli
          if [ -s repos.json ]; then
            echo "Les données du fichier repos.json ont été correctement récupérées."
          else
            echo "Erreur : La récupération des données a échoué ou le fichier est vide."
            exit 1  # Arrêter l'exécution si la récupération échoue
          fi

          echo "Contenu de repos.json après récupération des données :"
          cat repos.json

      # Ajouter un timestamp correctement sans écraser le fichier
      - name: Add timestamp to repos.json
        run: |
          # Vérifier si le fichier JSON contient des données
          if [ -s repos.json ]; then
            echo "Le fichier repos.json contient des données, ajout du timestamp."
            # Ajouter le timestamp au contenu existant
            current_content=$(cat repos.json)
            echo "${current_content}" | jq --arg date "$(date)" '. + {"last_updated": $date}' > repos.json
          else
            echo "Erreur : Le fichier repos.json est vide. Aucune donnée à mettre à jour."
          fi
          echo "Contenu de repos.json après ajout du timestamp :"
          cat repos.json

      # Commit et push des changements
      - name: Commit repository data
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Action Bot"
          git add repos.json
          git commit -m "Mise à jour des données des dépôts"
          git push origin test-workflows
