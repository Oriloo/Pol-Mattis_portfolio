name: Update Repository Data

on:
  schedule:
    - cron: '0 0 * * *'  # Exécution tous les jours à 0h00 UTC
  workflow_dispatch:  # Permet de déclencher manuellement le workflow

permissions:
  contents: write  # Donne au PAT les permissions d'écriture
  issues: read     # Donne accès aux issues du dépôt (si besoin)

jobs:
  update-repo-data:
    runs-on: ubuntu-latest
    steps:
      # Étape 1: Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2: Activer le débogage
      - name: Activer le débogage
        run: set -x

      # Étape 3: Récupérer les données directement dans le répertoire de travail
      - name: Fetch repository data directement dans le répertoire de travail
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/user/repos?per_page=100&type=public > $GITHUB_WORKSPACE/repos.json
          ls -lh $GITHUB_WORKSPACE/repos.json
          cat $GITHUB_WORKSPACE/repos.json

      # Étape 4: Modifier repos.json avec un timestamp
      - name: Modifier repos.json avec un timestamp
        run: |
          echo "Dernière mise à jour: $(date)" >> $GITHUB_WORKSPACE/repos.json
          cat $GITHUB_WORKSPACE/repos.json

      # Étape 5: Vérifier les changements détectés par Git
      - name: Vérifier les changements détectés par Git
        run: |
          git status
          git diff repos.json

      # Étape 6: Commit et push des données
      - name: Commit repository data
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "GitHub Action Bot"
          cd $GITHUB_WORKSPACE
          git add repos.json
          git commit --allow-empty -m "Mise à jour des données des dépôts"
          git push origin test-workflows
